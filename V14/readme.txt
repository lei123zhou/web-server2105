解决浏览器提交数据时传递中文问题
当我们用GET形式提交表单数据，则表单数据会被包含在URL中。而URL的抽象路径
部分会被包含在请求的请求行中。
然而请求行HTTP协议要求里面的文字必须使用的字符集为ISO8859-1。这是一个
欧洲的字符集，里面不支持中文！！

例如:表单传递的中文，本来抽象路径的样子应当为:
/myweb/regUser?username=范传奇&password=123456...

为了解决这个问题:
1:浏览器会先将中文用UTF-8(页面中<meta>标签指定的字符集)编码转换为对应
  的一组字节(2进制)。注:UTF-8一个中文字符占3个字节
  因此:范传奇三个中文会转换为9个字节
  由于字符'1'和'0'是ISO8859-1支持的字符，抽象路径会变为:
  /myweb/regUser?username=11101000...(72位二进制)&password=123456...
  用2进制1,0来规避掉中文
  缺点:2进制太长了

2:为了解决用2进制表示ISO8859-1不支持的字符导致的长度问题，因此可以将
  每个字节的2进制（8位）改为16进制(2位)
  抽象路径为:
  /myweb/regUser?username=E88C83...(18位16进制)&password=123456...
  长度解决了，新的问题:如何与英文数字区分?
  为了区分URL要求如果2个英文或数组组合表示的是16进制则前面必须加一个%
  /myweb/regUser?username=%E8%8C%83...(18位16进制)&password=123456...

进制对应关系:
以4位2进制为例:
2进制         10进制            16进制
0000            0               0
0001            1               1
0010            2               2
0011            3               3
0100            4               4
0101            5               5
0110            6               6
0111            7               7
1000            8               8
1001            9               9
1010            10              A
1011            11              B
1100            12              C
1101            13              D
1110            14              E
1111            15              F
因此1个字节的8位2进制就可以用2位16进制表示。
例如:
2进制:    11101000
16进制:   E   8

'范'在UTF-8转换的2进制对应的3个字节内容为:
[11101000,10001100,10000011]
[E8,8C,83]
